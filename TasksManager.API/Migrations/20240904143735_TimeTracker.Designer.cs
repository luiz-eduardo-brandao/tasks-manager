// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksManager.API.Data;

#nullable disable

namespace TasksManager.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240904143735_TimeTracker")]
    partial class TimeTracker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TasksManager.API.Models.Collaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Collaborators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de9ba586-4947-453b-be89-14f541b85a2f"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 86, DateTimeKind.Utc).AddTicks(31),
                            Name = "Edu Brandão",
                            UserId = new Guid("a1a4c3f8-a06f-446c-8c10-75493ea27034")
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2da4b9ee-53c2-43f5-b9ac-c468cfeff187"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 86, DateTimeKind.Utc).AddTicks(52),
                            Name = "Projeto Validações"
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.TaskModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20a71112-6939-49b3-b941-b23a94af5be1"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 86, DateTimeKind.Utc).AddTicks(77),
                            Description = "Levantamento de Requisitos da demanda",
                            Name = "Levantamento de Requisitos",
                            ProjectId = new Guid("2da4b9ee-53c2-43f5-b9ac-c468cfeff187")
                        },
                        new
                        {
                            Id = new Guid("99403190-e7fb-44f1-a904-6d63603c0dbd"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 86, DateTimeKind.Utc).AddTicks(101),
                            Description = "Analisando atividades da demanda",
                            Name = "Análise da demanada",
                            ProjectId = new Guid("2da4b9ee-53c2-43f5-b9ac-c468cfeff187")
                        },
                        new
                        {
                            Id = new Guid("88f60560-f3c4-47f0-b1da-23c1c80069a8"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 86, DateTimeKind.Utc).AddTicks(121),
                            Description = "Desenvolver tela para cadastro de usuários",
                            Name = "Desenvolvimento atividade 1",
                            ProjectId = new Guid("2da4b9ee-53c2-43f5-b9ac-c468cfeff187")
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.TimeTracker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("TaskModelId");

                    b.ToTable("TimeTrackers");
                });

            modelBuilder.Entity("TasksManager.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a4c3f8-a06f-446c-8c10-75493ea27034"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 37, 35, 85, DateTimeKind.Utc).AddTicks(9890),
                            Password = "123@Test",
                            UserName = "Edu Brandão"
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.Collaborator", b =>
                {
                    b.HasOne("TasksManager.API.Models.User", null)
                        .WithOne("Collaborator")
                        .HasForeignKey("TasksManager.API.Models.Collaborator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TasksManager.API.Models.TaskModel", b =>
                {
                    b.HasOne("TasksManager.API.Models.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TasksManager.API.Models.TimeTracker", b =>
                {
                    b.HasOne("TasksManager.API.Models.Collaborator", null)
                        .WithMany("TimeTrackers")
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManager.API.Models.TaskModel", null)
                        .WithMany("TimeTrackers")
                        .HasForeignKey("TaskModelId");
                });

            modelBuilder.Entity("TasksManager.API.Models.Collaborator", b =>
                {
                    b.Navigation("TimeTrackers");
                });

            modelBuilder.Entity("TasksManager.API.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TasksManager.API.Models.TaskModel", b =>
                {
                    b.Navigation("TimeTrackers");
                });

            modelBuilder.Entity("TasksManager.API.Models.User", b =>
                {
                    b.Navigation("Collaborator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
