// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksManager.API.Data;

#nullable disable

namespace TasksManager.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240904142935_ProjectsAndTasks")]
    partial class ProjectsAndTasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TasksManager.API.Models.Collaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Collaborators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("277c966a-d6ae-42c2-9c8d-08d03aff68b1"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6580),
                            Name = "Edu Brandão",
                            UserId = new Guid("465191a0-6a17-49eb-a234-3068bc13af19")
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c68374c-dcad-471e-b20a-6ac88f4a4d45"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6608),
                            Name = "Projeto Validações"
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.TaskModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7391bfbd-d2be-460b-b070-d7a0fc441177"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6624),
                            Description = "Levantamento de Requisitos da demanda",
                            Name = "Levantamento de Requisitos",
                            ProjectId = new Guid("3c68374c-dcad-471e-b20a-6ac88f4a4d45")
                        },
                        new
                        {
                            Id = new Guid("3fa52e58-2dea-4951-9812-0c6f637f3714"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6639),
                            Description = "Analisando atividades da demanda",
                            Name = "Análise da demanada",
                            ProjectId = new Guid("3c68374c-dcad-471e-b20a-6ac88f4a4d45")
                        },
                        new
                        {
                            Id = new Guid("5395e9ad-81ef-46fe-a2dc-21f0f13ef9b2"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6652),
                            Description = "Desenvolver tela para cadastro de usuários",
                            Name = "Desenvolvimento atividade 1",
                            ProjectId = new Guid("3c68374c-dcad-471e-b20a-6ac88f4a4d45")
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("465191a0-6a17-49eb-a234-3068bc13af19"),
                            CreatedAt = new DateTime(2024, 9, 4, 14, 29, 35, 304, DateTimeKind.Utc).AddTicks(6458),
                            Password = "123@Test",
                            UserName = "Edu Brandão"
                        });
                });

            modelBuilder.Entity("TasksManager.API.Models.Collaborator", b =>
                {
                    b.HasOne("TasksManager.API.Models.User", null)
                        .WithOne("Collaborator")
                        .HasForeignKey("TasksManager.API.Models.Collaborator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TasksManager.API.Models.TaskModel", b =>
                {
                    b.HasOne("TasksManager.API.Models.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TasksManager.API.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TasksManager.API.Models.User", b =>
                {
                    b.Navigation("Collaborator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
